#!/usr/bin/env dub
/+ dub.sdl:
name "tui-test"
description "A minimal D application."
authors "Alisa Lain"
copyright "Copyright Â© 2022, Alisa Lain"
license "proprietary"
dependency "sily" path="/g/sily-dlang/"
dependency "sily:tui" path="/g/sily-dlang/"
dependency "sily:terminal" path="/g/sily-dlang/"
dependency "sily:logger" path="/g/sily-dlang/"
// dependency "speedy-stdio" version="0.2.0"
targetType "executable"
+/
module test.tui;

import sily.logger;
import sily.tui;
import sily.tui.event;
import sily.tui.input;
import sily.tui.node;
import sily.vector;
// import sily.terminal.input;
import std.stdio: write;
import std.conv: to;
import std.stdio;

void main() {
    log!(LogLevel.trace, __LINE__, "tui.d")("Starting application.");
    
    Node element = append();
    element.size(ivec2(44, 33))
        .position(ivec2(5, 3))
        .background(col(0.2f, 0.5f, 1.0f))
        // .text("24x12,5x3: This is a test rectangle desu")
        .text("WORD")
        .foreground(col(1.0f, 0.8f, 0.4f))
        .halign(TextHAlign.center)
        .valign(TextVAlign.bottom);

    Node element2 = element.append();
    element2.size(ivec2(24, 11))
        .position(ivec2(1, 6))
        .background(col(0.4f, 0.2f, 0.0f))
        // .text("10x10,1x6: Nice sub element with long description")
        .text("S U C C E S S")
        .foreground(col(1.0f, 0.8f, 0.4f))
        .halign(TextHAlign.right)
        .valign(TextVAlign.middle);

    Node element3 = element.append();
    element3.size(ivec2(22, 22))
        .position(ivec2(10, 1))
        // .text("22x11, 10x1: An element with painfully long\nand broken description that shouldnt fit");
        .text("22x22, 10x1: I HAVE FIXED VECTOR AND SUPER HAPPY NOW");

    addInputListener(delegate void(InputEvent e) {
        if (e.key == Key.q) {
            stop();
        }
        if (e.key == Key.e) {
            element.text("New text");
        }
    });

    run();

    log!(LogLevel.trace, __LINE__, "tui.d")("Stopping application.");
}

