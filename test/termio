#!/usr/bin/env dub
/+ dub.sdl:
name "termiotest"
dependency "sily" path="/g/sily-dlang/"
dependency "sily:logger" path="/g/sily-dlang/"
dependency "sily:terminal" path="/g/sily-dlang/"
+/

import std.stdio: writef;
import std.conv: to;

import sily.terminal;
import sily.terminal.input;
import sily.logger;
import sily.bashfmt;
import sily.vector;
import sily.color;

void main() {

    writef("Preparing alternative buffer\n");
    sleep(100);
    eraseLines(2);
    writef("Preparing alternative buffer.\n");
    sleep(100);
    eraseLines(2);
    writef("Preparing alternative buffer..\n");
    sleep(100);
    eraseLines(2);
    writef("Preparing alternative buffer...\n");
    sleep(100);
    // info(getCursorPosition().toString);
    trace!(__LINE__, "termio")("Terminal mode set to raw");
    

    int key;
    setTitle("Test app cool");
    screenEnableAltBuffer();
    writef("Press key: \n");
    terminalModeSetRaw();

    bool quit = false;
    while (!quit) {
        if (kbhit) inputQueueAll();
        if (!inputQueueEmpty) {
            InputEvent e = inputGetKey!true();
            if (e.isKey(ikey(Key.q, Mod.c))) { quit = true; }
            // writef("%s %s %s %s\r\n", e.key, e.ctrl, e.alt, e.shift);
            string mods = "";
            mods ~= e.hasMod(Mod.c) ? "^" : "";
            mods ~= e.hasMod(Mod.s) ? "+" : "";
            mods ~= e.hasMod(Mod.a) ? "!" : "";
            writef("%s%s\n\r", mods, e.key);     
        }
    }

    terminalModeReset();
    screenDisableAltBuffer();
    trace!(__LINE__, "termio")("Reset terminal mode");
}

